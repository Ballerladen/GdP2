package studiplayer.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;

import studiplayer.audio.AudioFile;
import studiplayer.audio.PlayList;

@SuppressWarnings("serial")
public class Player extends JFrame implements ActionListener {

	// attributes
	private static String DEFAULT_TITLE = "Studiplayer empty play list";
	private static String DEFAULT_PLAYLIST = "playlists/DefaultPlayList.m3u";
	private static String PREFIX = "Current Song: ";
	private static String INITIAL_TIME = "00:00";
	private static String NO_SONG = "no current song";
	private static String NO_TIME = "--:--";
	private JLabel songDescription = null;
	private JLabel playTime = null;

	private PlayList playList;

	// PLAYER
	public Player(PlayList playList) {

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}

		this.playList = playList;

		// Create a panel for the buttons
		JPanel buttons = new JPanel();

		// GUI
		songDescription = new JLabel();
		playTime = new JLabel();

		updateSonginfo();

		// Create the buttons
		JButton bplay = new JButton(new ImageIcon("icons/play.png"));
		bplay.setActionCommand("AC_PLAY");
		bplay.addActionListener(this);
		buttons.add(bplay);

		JButton btogglepause = new JButton(new ImageIcon("icons/pause.png"));
		btogglepause.setActionCommand("AC_PAUSE");
		btogglepause.addActionListener(this);
		buttons.add(btogglepause);

		JButton bstop = new JButton(new ImageIcon("icons/stop.png"));
		bstop.setActionCommand("AC_STOP");
		bstop.addActionListener(this);
		buttons.add(bstop);

		JButton bnext = new JButton(new ImageIcon("icons/next.png"));
		bnext.setActionCommand("AC_NEXT");
		bnext.addActionListener(this);
		buttons.add(bnext);

		JButton bpleditor = new JButton(new ImageIcon("icons/pl_editor.png"));
		bpleditor.setActionCommand("AC_PL_EDITOR");
		bpleditor.addActionListener(this);
		buttons.add(bpleditor);

		// Add components to frame
		this.add(songDescription, BorderLayout.NORTH);
		this.add(playTime, BorderLayout.WEST);
		this.add(buttons, BorderLayout.CENTER);

		// Activate GUI
		this.pack();
		this.setVisible(true);

	}

	private void updateSonginfo() {
		if (this.playList.getCurrentAudioFile() == null) {
			this.setTitle(DEFAULT_TITLE);
			songDescription.setText(NO_SONG);
			playTime.setText(NO_TIME);
		} else {
			this.setTitle(PREFIX
					+ this.playList.getCurrentAudioFile().toString());
			songDescription.setText(this.playList.getCurrentAudioFile()
					.toString());
			playTime.setText(INITIAL_TIME);
		}

	}

	// Implement interface of ActionListener
	public void actionPerformed(ActionEvent e) {
		AudioFile af;
		String cmd = e.getActionCommand();

		if (cmd.equals("AC_PLAY")) {
			af = playList.getCurrentAudioFile();
			System.out.println("Playing" + af.toString());
			System.out.println("Filename is" + af.getFilename());
			System.out.println("Current index is" + playList.getCurrent());
		} else if (cmd.equals("AC_PAUSE")) {

			af = playList.getCurrentAudioFile();
			System.out.println("Playing" + af.toString());
			System.out.println("Filename is" + af.getFilename());
			System.out.println("Current index is" + playList.getCurrent());
		} else if (cmd.equals("AC_STOP")) {

			af = playList.getCurrentAudioFile();
			System.out.println("Playing" + af.toString());
			System.out.println("Filename is" + af.getFilename());
			System.out.println("Current index is" + playList.getCurrent());
		} else if (cmd.equals("AC_NEXT")) {

			af = playList.getCurrentAudioFile();
			System.out.println("Playing" + af.toString());
			System.out.println("Filename is" + af.getFilename());
			System.out.println("Current index is" + playList.getCurrent());
		}
		
		private void playCurrentSong() {
			AudioFile af = playList.getCurrentAudioFile();
			stopped = false;
			updateSongInfo(af);
			if (af != null) {
				// Start threads
				(new TimerThread()).start();
				(new PlayerThread()).start();
			}

		}

		private void stopCurrentSong() {
			AudioFile af = playList.getCurrentAudioFile();
			stopped = true;
			af.stop();

			if (af != null) {
				playList.getCurrentAudioFile().stop();
			}

			updateSongInfo(af);
		}
	}

	public static void main(String[] args) {
		PlayList playList = null;

		if (args.length == 0) {
			playList = new PlayList(DEFAULT_PLAYLIST);
		} else {
			playList = new PlayList(args[0].toString());
		}
		new Player(playList);
	}

}
